// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addApartment = `-- name: AddApartment :exec
INSERT INTO Apartament (
  name, street, building_number, building_name, flat_number, owner_id
) VALUES(
  ?, ?, ?, ?, ?, ?
)
`

type AddApartmentParams struct {
	Name           string
	Street         string
	BuildingNumber string
	BuildingName   sql.NullString
	FlatNumber     string
	OwnerID        int64
}

func (q *Queries) AddApartment(ctx context.Context, arg AddApartmentParams) error {
	_, err := q.db.ExecContext(ctx, addApartment,
		arg.Name,
		arg.Street,
		arg.BuildingNumber,
		arg.BuildingName,
		arg.FlatNumber,
		arg.OwnerID,
	)
	return err
}

const addOwner = `-- name: AddOwner :exec
INSERT INTO Owner (
  name, email, phone
) VALUES (
  ?, ?, ?
)
`

type AddOwnerParams struct {
	Name  string
	Email string
	Phone string
}

func (q *Queries) AddOwner(ctx context.Context, arg AddOwnerParams) error {
	_, err := q.db.ExecContext(ctx, addOwner, arg.Name, arg.Email, arg.Phone)
	return err
}

const addRepair = `-- name: AddRepair :exec
INSERT INTO Repair (
  fault_report_id, date_assigned
) VALUES (
  ?, ?
)
`

type AddRepairParams struct {
	FaultReportID sql.NullInt64
	DateAssigned  time.Time
}

func (q *Queries) AddRepair(ctx context.Context, arg AddRepairParams) error {
	_, err := q.db.ExecContext(ctx, addRepair, arg.FaultReportID, arg.DateAssigned)
	return err
}

const addSubcontractor = `-- name: AddSubcontractor :exec
INSERT INTO Subcontractor (
  user_id, address, NIP, speciality_id
) VALUES (
  ?, ?, ?, ?
)
`

type AddSubcontractorParams struct {
	UserID       int64
	Address      string
	Nip          string
	SpecialityID int64
}

func (q *Queries) AddSubcontractor(ctx context.Context, arg AddSubcontractorParams) error {
	_, err := q.db.ExecContext(ctx, addSubcontractor,
		arg.UserID,
		arg.Address,
		arg.Nip,
		arg.SpecialityID,
	)
	return err
}

const getApartmentID = `-- name: GetApartmentID :one
SELECT apartment_id FROM Renting_History 
WHERE end_date IS NULL AND user_id = ?
`

func (q *Queries) GetApartmentID(ctx context.Context, userID sql.NullInt64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getApartmentID, userID)
	var apartment_id sql.NullInt64
	err := row.Scan(&apartment_id)
	return apartment_id, err
}

const getRent = `-- name: GetRent :one
SELECT price FROM Pricing_History 
WHERE is_current = 0 AND apartment_id = ?
`

func (q *Queries) GetRent(ctx context.Context, apartmentID int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, getRent, apartmentID)
	var price float64
	err := row.Scan(&price)
	return price, err
}

const getRepair = `-- name: GetRepair :many
SELECT id, fault_report_id, date_assigned, date_completed, status_id, subcontractor_id FROM Repair
`

func (q *Queries) GetRepair(ctx context.Context) ([]Repair, error) {
	rows, err := q.db.QueryContext(ctx, getRepair)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repair
	for rows.Next() {
		var i Repair
		if err := rows.Scan(
			&i.ID,
			&i.FaultReportID,
			&i.DateAssigned,
			&i.DateCompleted,
			&i.StatusID,
			&i.SubcontractorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubconInfo = `-- name: GetSubconInfo :one
SELECT address, NIP, speciality_id FROM Subcontractor 
WHERE user_id = ?
`

type GetSubconInfoRow struct {
	Address      string
	Nip          string
	SpecialityID int64
}

func (q *Queries) GetSubconInfo(ctx context.Context, userID int64) (GetSubconInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getSubconInfo, userID)
	var i GetSubconInfoRow
	err := row.Scan(&i.Address, &i.Nip, &i.SpecialityID)
	return i, err
}

const getUserId = `-- name: GetUserId :one
SELECT id FROM User 
WHERE email = ?
`

func (q *Queries) GetUserId(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserId, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT id, name, phone, role_id FROM User 
WHERE id = ?
`

type GetUserInfoRow struct {
	ID     int64
	Name   string
	Phone  string
	RoleID int64
}

func (q *Queries) GetUserInfo(ctx context.Context, id int64) (GetUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, id)
	var i GetUserInfoRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.RoleID,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM User 
WHERE id = ?
`

func (q *Queries) GetUserPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT role_id FROM User 
WHERE id = ?
`

func (q *Queries) GetUserRole(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var role_id int64
	err := row.Scan(&role_id)
	return role_id, err
}
